var qc = {};
qc.Config = function() {};
qc.Config.prototype = {};
qc.Config.prototype.maxPass;
qc.Config.prototype.maxInvalid;
qc.Config.prototype.maxShrink;
qc.Config.prototype.searchString;
qc.Config.prototype.needsWork = function() {};
qc.ConsoleListener = function() {};
qc.ConsoleListener.prototype = {};
qc.ConsoleListener.prototype.maxCollected;
qc.ConsoleListener.prototype.noteResult = function() {};
qc.ConsoleListener.prototype.done = function() {};
qc.ConsoleListener.prototype.log = function() {};
qc.ConsoleListener.prototype.passed = function() {};
qc.ConsoleListener.prototype.invalid = function() {};
qc.ConsoleListener.prototype.failure = function() {};
qc.Distribution = function() {};
qc.Distribution.prototype = {};
qc.Distribution.prototype.data;
qc.Distribution.prototype.length;
qc.Distribution.prototype.normalize = function() {};
qc.Distribution.prototype.getProbability = function() {};
qc.Distribution.prototype.getMostProbable = function() {};
qc.Distribution.prototype.pick = function() {};
qc.Distribution.uniform = function() {};
qc.HtmlListener = function() {};
qc.HtmlListener.prototype = {};
qc.HtmlListener.prototype.maxCollected;
qc.HtmlListener.prototype.noteResult = function() {};
qc.HtmlListener.prototype.done = function() {};
qc.HtmlListener.prototype.log = function() {};
qc.HtmlListener.prototype.passed = function() {};
qc.HtmlListener.prototype.invalid = function() {};
qc.HtmlListener.prototype.failure = function() {};
qc.HtmlListener.prototype._showPassedTests;
qc.HtmlListener.prototype._domNode;
qc.NodeConsoleListener = function() {};
qc.NodeConsoleListener.prototype = {};
qc.NodeConsoleListener.prototype.maxCollected;
qc.NodeConsoleListener.prototype.noteResult = function() {};
qc.NodeConsoleListener.prototype.done = function() {};
qc.NodeConsoleListener.prototype.log = function() {};
qc.NodeConsoleListener.prototype.passed = function() {};
qc.NodeConsoleListener.prototype.invalid = function() {};
qc.NodeConsoleListener.prototype.failure = function() {};
qc.Prop = function() {};
qc.Prop.prototype = {};
qc.Prop.prototype.name;
qc.Prop.prototype.generateArgs = function() {};
qc.Prop.prototype.generateShrunkArgs = function() {};
qc.Prop.prototype.run = function() {};
qc.frequency = function() {};
qc.choose = function() {};
qc.expectException = function() {};
qc.failOnException = function() {};
qc.Invalid = function() {};
qc.Invalid.prototype.status;
qc.Invalid.prototype.prop;
qc.Invalid.prototype.stats;
qc.Invalid.prototype.name;
qc.Invalid.prototype.toString = function() {};
qc.Pass = function() {};
qc.Pass.prototype.status;
qc.Pass.prototype.prop;
qc.Pass.prototype.stats;
qc.Pass.prototype.name;
qc.Pass.prototype.toString = function() {};
qc.allProps = [];
qc.choose = function() {};
qc.declare = function() {};
qc.expectException = function() {};
qc.failOnException = function() {};
qc.frequency = function() {};
qc.generateShrunkValues = function() {};
qc.generateValue = function() {};
qc.generator = {};
qc.generator.arrShrinkOne = function() {};
qc.generator.arrays = function() {};
qc.generator.arraysOfSize = function() {};
qc.generator.booleans = function() {};
qc.generator.chooseGenerator = function() {};
qc.generator.chooseValue = function() {};
qc.generator.dates = function() {};
qc.generator.mod = function() {};
qc.generator.nonEmptyArrays = function() {};
qc.generator.nullOr = function() {};
qc.generator.nulls = function() {};
qc.generator.number = {};
qc.generator.number.floats = function() {};
qc.generator.number.integers = function() {};
qc.generator.number.positiveIntegers = function() {};
qc.generator.number.range = function() {};
qc.generator.string = {};
qc.generator.string.characters = function() {};
qc.generator.string.nonEmptys = {};
qc.generator.string.strings = function() {};
qc.generator.undefinedOr = function() {};
qc.generator.undefineds = function() {};
qc.getFloat = function() {};
qc.getInteger = function() {};
qc.getPositiveInteger = function() {};
qc.justSize = {};
qc.justSize.arb;
qc.justSize.shrink;
qc.resetProps = function() {};
qc.runProps = function() {};
qc.shrinkLoop = function() {};
